#summary Detailed descriptions of DAAP requests

== login ==
 * *Request* daap://server/login
 * *Params*
  * *pairing-guid* hexadecimal value of the pairing code (e.g. 0x549361C47D6CDA53)
 * *Response* mlog
 * *Description* Provides session information to use for the rest of the session.  If `requiresLogin` is set in the server-info, then from this point on, a basic http authentication header needs to be included with the request.  It is basically a header of the form:

Authentication: base64encodedusernamepassword

where the base64 encoded password is the string: `username:password` base64 encoded (obviously replacing username and password with the appropriate values).  Username appears to be meaningless.

 * *Content*
{{{
	mlog
	  mstt	status
	  mlid	session id (used in remaining requests below)
}}}

== logout ==
== content-codes ==
 * *Request* daap://server/content-codes
 * *Response* mccr
 * *Description* Provides a dictionary of content codes, names, and size information.  
 * *Content*
{{{
mccr
  mstt		status
  mdcl		dictionary entry (one for each type)
    mcna	item name
    mcnm	item number
    mcty	item type
}}}
== server-info ==
 * *Request* daap://server/server-info (or http://server:3689/)
 * *Response* msrv
 * *Description* Provides basic negotiation info on what the server does and doesn't support and protocols.
 * *Content* 
{{{
msrv
  mstt - status
  apro - daap protocol
  msix - does the server support indexing?
  msex - does the server support extensions?
  msup - does the server support update?
  msal - does the server support auto-logout?
  mstm - timeout interval
  mslr - is login required?
  msqy - does the server support queries?
  minm - server name
  msrs - does the server support resolve?  (needs persistent ids)
  msbr - does the server support browsing?
  mspi - does the server support persistent ids?
  mpro - dmap protocol version
}}}

== databases ==
 * *Request* daap://server/databases
 * *Params*
  * *session-id* session id 
 * *Response* avdb
 * *Description* This provides a list of databases served up by the server.  At present, it appears that only one db per server is the norm, but it may be possible to have multiple servers.

 * *Content*
{{{
avdb
  mstt - status
  muty - update type - always 0 for now
  mtco - total number of matching records
  mrco - total number of records returned
  mlcl - listing of records
    mlit - single record
      miid - database id (<dbid> in subsequent requests)
      mper - database persistent id
      minm - database name
      mimc - number of items (songs) in the database
      mctc - number of containers (playlists) in the database
}}}